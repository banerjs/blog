// Basic actions that can be generated by the views
var Promise = require('promise');
var labels = require('./index');
var constants = require('../utils/constants');

var BlogActions = require('./BlogActions');

// Debug
var debug = require('debug')('blog:server');

var AdminActions = {
	/**
	 * This is simply an Admin pass through to BlogActions#fetchBlogPost
	 *
	 * @param context The actionContext from Fluxible
	 * @param payload An object that contains the URL that data needs to be
	 		fetched for. payload.url must be a valid URL
	 * @return A Promise that reolves to true if everything succeeded.
	 */
	fetchBlogPost: function(context, payload) {
		return BlogActions.fetchBlogPost(context, payload);
	},

	/**
	 * This is simply an Admin pass through to BlogActions#updateSections
	 *
	 * @param context The actionContext from Fluxible
	 * @param payload This is empty
	 * @return A Promise that resolves to true if the action succeeded
	 */
	fetchSections: function(context, payload) {
		return BlogActions.updateSections(context, payload);
	},

	/**
	 * This action simply loads the desired CSRF token into the store
	 *
	 * @param context The actionContext from Fluxible
	 * @param payload The generated CSRF token
	 * @return A Promise that resolves to true if the action succeeded
	 */
	loadCSRF: function(context, payload) {
		return new Promise(function(resolve, reject) {
			context.dispatch(labels.LOAD_CSRF, payload);
			resolve(true);
		});
	},

	/**
	 * This function logs the user into the app if the hash provided via the
	 * payload is acceptable. If not, it sends an error. NOTE: This action is
	 * only ever executed on the client. There is no check to ensure this yet
	 *
	 * @param context The actionContext from Fluxible
	 * @param payload The details about login. Contains a single field: hash
	 * @return A Promise that resolves to true if the action succeeded
	 */
	login: function(context, payload) {
		return new Promise(function(resolve, reject) {
			var idToken = window.localStorage.getItem(constants.LOCAL_STORAGE_USER_TOKEN);
			var authHash = payload.hash;

			// Taken directly from Auth0
			if (!idToken && !!authHash) {
				if (authHash.id_token) {
					idToken = authHash.id_token;
					window.localStorage.setItem(constants.LOCAL_STORAGE_USER_TOKEN, idToken);
				}
				if (authHash.error) {
					reject(authHash.error);
				}
			}

			// Ensure that the app knows that we are logged in
			context.dispatch(labels.LOGGED_IN, { idToken: idToken });
			resolve(true);
		});
	},

	/**
	 * This function logs the user out of the app. NOTE: This action should
	 * only ever be executed on the client. There is no check to ensure this yet
	 *
	 * @param context The actionContext from Fluxible
	 * @param payload The details about logout. No payload
	 * @return A Promise that resolves to true if the action succeeded
	 */
	logout: function(context, payload) {
		return new Promise(function(resolve, reject) {
			window.localStorage.removeItem(constants.LOCAL_STORAGE_USER_TOKEN);
			context.dispatch(labels.LOGGED_OUT, {});
			resolve(true);
		});
	}
}

module.exports = AdminActions;
