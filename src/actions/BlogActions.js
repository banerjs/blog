// Basic actions that can be generated by the views
var promise = require('promise');
var labels = require('./index');
var BlogStore = require('../stores/BlogStore');

// Debug
var debug = require('debug')('blog:server');

var BlogActions = {
	/**
	 * This is the basic action of retieving the HTML for a given URL
	 *
	 * @param context The actionContext from Fluxible
	 * @param payload An object that contains the URL that data needs to be
	 		fetched for. payload.url must be a valid URL
	 * @return A Promise that reolves to true if everything succeeded.
	 */
	fetchBlogPost: function(context, payload) {
		return context.getDataSource()
					.getPostFromUrl(payload.url)
					.then(function(post) {
						data = {
							url: payload.url,
							post: post
						};
						context.dispatch(labels.FETCH_POST, data);
						return true;
					});
	},

	/**
	 * This function handles the transition to a new URL.
	 *
	 * @param context The actionContext from Fluxible
	 * @param payload The details about the move. The following are present in
	 *		payload: payload.url, payload.direction, payload.history
	 * @return A Promise that resolves to [true, true] if the action succeeded
	 */
	moveToNewPage: function(context, payload) {
		var storeUpdate = new Promise(function(resolve, reject) {
			// First create a data structure to send the data back to the stores
			// and also fetch the desired data from the stores
			var store = context.getStore(BlogStore);
			var data = {
				url: payload.url,
				css: store.getPostCSS(payload.url),
				history: payload.history
			};

			// Then update the stores with the new data
			context.dispatch(labels.NEW_PAGE, data);
			resolve(true);
		});

		// Asynchronously animate the page
		var animate = new Promise(function(resolve, reject) {
			// Do animations (probably need an if statement here for window)
			resolve(true);
		});

		return Promise.all([storeUpdate, animate]);
	},

	/**
	 * Update the store of all the sections that are present in the Blog
	 */
	updateSectionsList: function(context, payload, done) {
		done();
	}
}

module.exports = BlogActions;
