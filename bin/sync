#!/usr/bin/env node
// This script traverses the posts subdirectory and ensures that the databases
// are in sync with the filesystem
var fs = require('fs');
var path = require('path');
var Promise = require('promise');
var mongo = require('mongodb').connect(process.env.DATABASE_URL, { promiseLibrary: Promise });

var constants = require('../build/utils/constants');

// First traverse the filesystem and index all the post files
var fsresult = new Promise(function(resolve, reject) {		// List the sections
	fs.readdir(constants.POSTS_ROOT_DIR, function(err, folders) {
		if (err) {
			reject(err);
		}
		resolve(folders);
	});
}).then(function(folders) {									// List contents of each section
	var promises = [];
	folders.forEach(function(folder) {
		promises.push(new Promise(function(resolve, reject) {
			fs.readdir(path.resolve(constants.POSTS_ROOT_DIR, folder), function(err, files) {
				if (err) {
					reject(err);
				}
				var data = {
					folder: folder,
					files: files.map(function(file) { return path.join(folder,file); })
				};
				resolve(data);
			});
		}));
	});
	return Promise.resolve(Promise.all(promises));
}).then(function(fsdata) {									// Remove sections that don't have files
	return fsdata.filter(function(data) {
		return data.files.length > 0;
	});
});

// Log the results of the filesystem traversal
fsresult.then(function(result) {
	console.log("FS Index:\n", result);
}, function(err) {
	console.error("(ERROR) FS Index: ", err);
});

// Create persistent connections to the database
var connections = mongo.then(function(db) {
	return [db.collection("sections"), db.collection("posts")];
});

// Fetch the data in the Mongo database and make sure it corresponds to the data
// parsed out from the filesystem
var dbresult = connections.then(function(collections) {
	var sections = collections[0].find({}).toArray();
	var posts = collections[1].find({}).toArray();

	return Promise.all([sections, posts]).then(function(data) {
		var sections = data[0];
		var posts = data[1];
		var dbdata = [];

		sections.forEach(function(section) {
			var data = {
				folder: section.foldername,
				files: posts.filter(function(post) {
							return post.section === section.foldername;
						}).map(function(post) {
							return post.filename;
						})
			};
			dbdata.push(data);
		});

		return dbdata;
	});
});

// Log the results of the DB traversal
dbresult.then(function(result) {
	console.log("DB Index:\n", result);
}, function(err) {
	console.error("(ERROR) DB Index: ", err);
});

// Create the insert set and the delete set
var inserts = Promise.all([fsresult, dbresult]).then(function(results) {
	var fsdata = results[0];
	var dbdata = results[1];
	var insertSet = [];

	// First create the insert by checking missing files in DB
	fsdata.forEach(function(fssection) {
		// Find the database section matching this folder section
		var dbsection_idx = dbdata.map(function(data) { return data.folder; }).indexOf(fssection.folder);

		// First check for the presence of a section. Then if the section is
		// present, diff the files
		if (dbsection_idx === -1) {					// Section not present in DB
			insertSet.push({
				folder: fssection.folder,
				files: fssection.files,
				insert_section: true
			});
		} else {									// Section present in DB
			var dbsection = dbdata[dbsection_idx];	// Pointer to db section
			var insertData = {						// Stub data object
				folder: fssection.folder,
				files: [],
				insert_section: false
			}
			fssection.files.forEach(function(fsfile) {	// Check all the files
				var dbfile_idx = dbsection.files.indexOf(fsfile);
				if (dbfile_idx === -1) {			// File is missing in DB
					insertData.files.push(fsfile);
				}
			});
			if (insertData.files.length > 0) {		// Insert files if missing
				insertSet.push(insertData);
			}
		}
	});

	return insertSet;
});

var deletes = Promise.all([fsresult, dbresult]).then(function(results) {
	var fsdata = results[0];
	var dbdata = results[1];
	var deleteSet = [];

	// Look for missing records in the file system
	dbdata.forEach(function(dbsection) {
		// Find the database section matching this folder section
		var fssection_idx = fsdata.map(function(data) { return data.folder; }).indexOf(dbsection.folder);

		// First check for the presence of a section. Then if the section is
		// present, diff the files
		if (fssection_idx === -1) {					// Section not present in FS
			deleteSet.push({
				folder: dbsection.folder,
				files: dbsection.files,
				delete_section: true
			});
		} else {									// Section present in FS
			var fssection = fsdata[fssection_idx];	// Pointer to database section
			var deleteData = {						// Stub data object
				folder: dbsection.folder,
				files: [],
				delete_section: false
			}
			dbsection.files.forEach(function(dbfile) {	// Check all the files
				var fsfile_idx = fssection.files.indexOf(dbfile);
				if (fsfile_idx === -1) {			// File is missing in FS
					deleteData.files.push(dbfile);
				}
			});
			if (deleteData.files.length > 0) {		// Delete records only if missing
				deleteSet.push(deleteData);
			}
		}
	});

	return deleteSet;
});

// Log the end result of the inserts and deletes
inserts.then(function(result) {
	console.log("Inserts:\n", result);
}, function(err) {
	console.error("(ERROR) Inserts: ", err);
});
deletes.then(function(result) {
	console.log("Deletes:\n", result);
}, function(err) {
	console.error("(ERROR) Deletes: ", err);
});

// Run the insert statements (with sensible defaults)
var execInserts = inserts.then(function(inserts) {
	var sectionPromise = Promise.resolve(true);			// Stub promise

	// Process each section synchronously
	inserts.forEach(function(section) {
		// Insert the section if there is a need to do so
		if (!!section.insert_section) {
			// Generate the name and URL
			var name = section.folder.charAt(0).toUpperCase() + section.folder.slice(1);
			var url = '/' + section.folder;

			sectionPromise = sectionPromise.then(function() {
				return connections.then(function(collections) {
					var sections = collections[0];
					// Find out the max_priority that exists in the DB now and
					// then insert one with a higher priority
					return sections.find({})
								.sort({ 'priority': -1 })
								.limit(1)
								.next()
								.then(function(section) {
									if (!section) {		// Check if is first
										return 0;
									}
									return section.priority;
								}).then(function(max_priority) { // Insert
									return sections.insertOne({
											name: name,
											foldername: section.folder,
											url: url,
											priority: max_priority + 1
										});
								});
				});
			});
		}

		// Query the DB for the section and add the necessary files
		sectionPromise = sectionPromise.then(function() {
			return connections.then(function(collections) {
				var sections = collections[0];
				var posts = collections[1];

				// Create variables that need to be filled by promises
				var dbsection;

				// Create a promise to fetch the section
				var promise = sections.find({ foldername: section.folder })
										.next()
										.then(function(section) {
											dbsection = section;
										});

				// Iterate through each of the slides that need to be inserted
				section.files.forEach(function(slide) {
					promise = promise.then(function() {
						return posts.find({ 'section': section.folder })
									.sort({ 'slide': -1 })
									.limit(1)
									.next()
									.then(function(dbslide) {
										if (!dbslide) {	// Check if first
											return 0;
										}
										return dbslide.slide;
									});
					}).then(function(max_slide) {
						// Guaranteed to have the section by this point
						var url = dbsection.url + '/' + path.basename(slide, '.html');
						var insert_date = new Date();
						return posts.insertOne({
							url: url,
							section: dbsection.foldername,
							slide: max_slide + 1,
							filename: slide,
							created_date: insert_date,
							updated_date: insert_date
						});
					});
				});

				// Finally return the promise object so that execution completes
				// only when all promises are fulfilled
				return promise;
			});
		});
	});

	// Add in the section promise as the last element to wait upon
	return sectionPromise;								// Return when all done
});

// Logging for the execution of inserts
execInserts.then(function() { console.log("Inserts Executed"); }, console.error);

// Run the delete statements
var execDeletes = deletes.then(function(deletes) {
	var promises = [];									// Holder for promises

	deletes.forEach(function(section) {
		if (!!section.delete_section) {					// Delete the section
			promises.push(connections.then(function(collections) {
				var sections = collections[0];
				return sections.deleteOne({ foldername: section.folder });
			}));
		}

		// Delete the posts
		section.files.forEach(function(slide) {
			promises.push(connections.then(function(collections) {
				var posts = collections[1];
				return posts.deleteOne({ filename: slide });
			}));
		});
	});

	return Promise.all(promises);
});

// Logging for the execution of deletes
execDeletes.then(function() { console.log("Deletes Executed"); }, console.error);

// Then make sure the section slide associations get updated
var sectionsUpdate = Promise.all([execInserts, execDeletes]).then(function() {
	return connections.then(function(collections) {
		var sections = collections[0];
		var posts = collections[1];

		// Set up the DB operations
		return sections.find({})
					.toArray()
					.then(function(sectionObjects) {
						// Promises to keep track of the posts parsed
						var postPromises = [];

						sectionObjects.forEach(function(section) {
							postPromises.push(
								posts.find({ section: section.foldername })
									.sort({ 'slide': 1 })
									.toArray()
									.then(function(postObjects) {
										var postUrls = [];
										postObjects.forEach(function(post) {
											postUrls.push(post.url);
										});
										return postUrls;
									}).then(function(postUrls) {
										return sections.findOneAndUpdate(
											{ foldername: section.foldername },
											{ $set: { slides: postUrls } }
										);
									})
							);
						});

						return Promise.all(postPromises).catch(console.error);
					}).catch(console.error);
	}).catch(console.error);
});

// Logging for the update of sections
sectionsUpdate.then(function() { console.log("Sections Updated"); }, console.error);

// Finally, when all is done, close the connection to the DB and return success
// or failed
Promise.all([sectionsUpdate, mongo]).then(function(results) {
	var db = results[1];
	return db.close();
}).then(function() {
	console.log("SUCCESS");
	return;
}, function() {
	console.error("FAILED");
	return;
});
